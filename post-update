#!/bin/bash

# This script is called after the website is updated
# Constants and functions are defined at the top, the script is at the bottom

ROOT="`pwd`"
OUT_DIR="out"

# Create the output directory
mkdir -p $ROOT/$OUT_DIR

clone_submodules(){
    # Clones all the submodules in the project
    # Can't use `git submodule` commands  because this is working in the file tree, not a repo
    # Couldn't figure out the proper way to do submodules with a bare repo
    cd $ROOT

    if [[ -f .gitmodules ]]; then

        echo "Cloning git submodules"

        git config -f .gitmodules --get-regexp '^submodule\..*\.path$' |
        while read path_key path; do
            url_key=`echo $path_key | sed 's/\.path/.url/'`
            url=`git config -f .gitmodules --get "$url_key"`
            if [[ ! -d $path ]]; then
                # Module doesn't exist, clone it
                echo "Cloning new submodule '"$path"'"
                git clone "$url" "$path"
            else
                # Module exists, update it
                echo "Updating existing submodule '"$path"'"
                cd "$path"
                # Will overwrite everything
                git fetch --all
                git reset --hard origin/master
            fi
            cd $ROOT
        done
    fi
}

setup_venv(){

    # Set up the virtualenv for the python app
    echo "Checking virtualenv for '"$1"'"

    cd $ROOT/"$1"
    if [[ ! -d venv ]]; then
        # Application virtualenv not configured, configure it
        echo "Virtualenv not found, setting one up"
        virtualenv venv
        source venv/bin/activate
        if [[ -f requirements.txt ]]; then
            pip install -r requirements.txt
        fi
        # Signal that the venv was not found (created)
        return 1
    else
        echo "Found virtualenv, activating it"
        source venv/bin/activate
        # Signal that the venv was found
        return 0
    fi
}

run_gunicorn(){

    if ! setup_venv "$1"; then
        # Virtual env was created, not found - needs gunicorn
        pip install gunicorn
    fi

    # (Re)start gunicorn
    if [[ -f gunicorn.pid ]] && kill -HUP "`cat gunicorn.pid`"; then
        echo "Restarted gunicorn"
    else
        echo "Starting gunicorn"
        gunicorn app:app -b "unix:///tmp/"`basename "$1"`".socket" -w 1 -D -p gunicorn.pid
    fi

    # Leave the vitualenv
    deactivate
}

generate_site(){

    # Setup the virtualenv
    setup_venv pelican

    # Check for lessc LESS compiler
    need_less=`grep -q "SERVER_LESS\s*=\s*True\|1" publishconf.py`$?

    if [[ $need_less -eq 0 ]] && ! which lessc >/dev/null; then
        echo "**********WARNING: SITE WILL NOT BE GENERATED**********"
        echo "No LESS compiler installed, but Pelican is configured to use one"
    else
        if [[ $need_less -eq 0 ]]; then
            echo "Compiling the LESS file"
            lessc theme/static/css/style.less theme/static/css/style.css
        fi
        echo "Generating the site"
        pelican -s publishconf.py -o $ROOT/$OUT_DIR/www content
    fi

    # Leave the vitualenv
    deactivate
}

generate_configs(){
    # Make the directory for the config files
    mkdir -p $ROOT/$OUT_DIR/_conf

    # Replace {{root}} and {{output}} in config files as they're copied
    for f in $ROOT/web_config/*.conf; do
        sed -e "s|{{root}}|$ROOT|g" \
            -e "s|{{output}}|$ROOT/$OUT_DIR|g" \
            "$f" > $ROOT/$OUT_DIR/_conf/`basename "$f"`
    done
}

echo "Running post-update script"

# Clone all the git submodules
clone_submodules

# Restart Mag2tor
run_gunicorn $OUT_DIR/mag2tor

# Restart GH-I2P
run_gunicorn $OUT_DIR/gh-i2p

# Generate the site
generate_site

# Modify the config files
generate_configs

# Restart the webserver
echo "Restarting the webserver"
sudo /etc/init.d/nginx restart
