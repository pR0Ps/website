#!/bin/bash

# This script is called after the website is updated
# Constants and functions are defined at the top, the script is at the bottom

ROOT="`pwd`"
OUT_DIR="out"

setup_venv(){

    # Set up the virtualenv for the python app
    echo "Checking virtualenv for '"$1"'"

    if [[ ! -d $ROOT/"$1" ]]; then
        echo "No folder to setup virtualenv in found"
        # Signal an error occured
        return 2
    fi
    cd $ROOT/"$1"

    if [[ ! -d venv ]]; then
        # Application virtualenv not configured, configure it
        echo "Virtualenv not found, setting one up"

        if ! virtualenv venv -p "$2"; then
            echo "Setting up virtualenv failed"
            # Signal an error occured
            return 2
        fi

        # Signal that the venv was created
        ret=1
    else
        echo "Found virtualenv, activating it"

        # Signal that the venv was found
        ret=0
    fi

    source venv/bin/activate
    if [[ -f requirements.txt ]]; then
        # Get the newest versions allowed by the requirements file
        pip install --upgrade -r requirements.txt
    fi

    return $ret
}

run_gunicorn(){

    # Choose python version (default to system default)
    if [ "$#" -gt 1 ]; then
        pypath="$2"
    else
        pypath=`which python`
    fi

    setup_venv "$1" "$pypath"
    status=$?

    if [[ $status -eq 2 ]]; then
        # Failed to create the virtualenv, can't continue
        echo "Couldn't find or create the virtualenv, not starting the application"
        return
    fi

    # Always update to the latest version
    pip install --upgrade gunicorn

    # (Re)start gunicorn
    if [[ -f gunicorn.pid ]] && kill -HUP "`cat gunicorn.pid`"; then
        echo "Restarted gunicorn"
    else
        echo "Starting gunicorn"
        gunicorn app:app -b "unix:///tmp/"`basename "$1"`".socket" -w 1 -D -p gunicorn.pid
    fi

    # Leave the vitualenv
    deactivate
}

generate_site(){

    # Setup the virtualenv
    setup_venv pelican `which python`

    echo "Generating the site"
    pelican -s publishconf.py -o $ROOT/$OUT_DIR/www content

    # Leave the vitualenv
    deactivate
}

generate_configs(){
    # Make the directory for the config files (and delete old ones)
    mkdir -p $ROOT/$OUT_DIR/_conf
    rm $ROOT/$OUT_DIR/_conf/*

    # Replace {{root}} and {{output}} in config files as they're copied
    for f in $ROOT/web_config/*.conf; do
        sed -e "s|{{root}}|$ROOT|g" \
            -e "s|{{output}}|$ROOT/$OUT_DIR|g" \
            "$f" > $ROOT/$OUT_DIR/_conf/`basename "$f"`
    done
}

echo "Running post-update script"

echo "Checking dependencies"
dependencies=( "python2" "python3" "pip" "virtualenv" )
for command in ${dependencies[@]}; do
    if ! which $command &>/dev/null; then
        echo "Missing dependency '$command', exiting"
        exit 1
    fi
done

# Update the submodules
echo "Updating submodules"
git submodule update --init --recursive --force

# Run/restart webapps
run_gunicorn $OUT_DIR/mag2tor `which python3`
run_gunicorn $OUT_DIR/gh-i2p `which python2`

# Generate the site
generate_site

# Generate the Nginx config files
generate_configs

# Restart the webserver to apply changes
echo "Restarting the webserver"
sudo /etc/init.d/nginx restart
